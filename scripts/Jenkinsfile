#!groovy

DOCKER_IMAGE_NAME='xui_common_gv_image'
DOCKER_CONTAINER_NAME='xui_common_gv'
JUNIT_TEST_REPORT_FILE_NAME='junit_common_testreport.xml'

checkTypesExecutionResultCode = -1 
packageSecurityAuditResultCode = -1
packageSecurityAuditNotAllowedBits = 248 
linterResultCode = -1

node {
    // if (env.BRANCH_NAME == 'master') {
    //     echo 'I only execute on the master branch'
    // } else {
    //     echo 'I execute elsewhere'
    // }

    stage('clean up') {
        containerExistsResultCode = bat (
            script: "docker container inspect ${DOCKER_CONTAINER_NAME}",
            returnStatus: true
        )
        
        // 'docker container inspect' returns 0 if a container was found
        if (containerExistsResultCode == 0) {
            catchError {
                bat "docker stop ${DOCKER_CONTAINER_NAME}"
                bat "docker rm ${DOCKER_CONTAINER_NAME}"
            }
        }
    }

    stage("Clone") {
        checkout([$class: 'GitSCM',
            branches: [[name: "main"]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [ [
                    $class: 'SubmoduleOption',
                    disableSubmodules: false,
                    parentCredentials: true,
                    recursiveSubmodules: true,
                    reference: '',
                    trackingSubmodules: false
                ],
                [
                    $class: 'GitLFSPull'
                ]
            ],
            submoduleCfg: [],
            userRemoteConfigs: [
                [
                    url: "https://github.com/Maisaa66/tree-component.git"
                ]
            ]
        ])
    }

    stage("Prepare Docker Image") {
        imageExistsResultCode = bat (
            script: "docker image inspect ${DOCKER_IMAGE_NAME}",
            returnStatus: true
        )
        
        echo "Docker image inspect resultcode: ${imageExistsResultCode}"
        echo "Rebuild flag state: ${env.REBUILD_NODE_DOCKER_IMAGE}"

        // 'docker image inspect' returns 0 if an image was found
        if (imageExistsResultCode != 0 || "true" == env.REBUILD_NODE_DOCKER_IMAGE) {
            bat "docker build --tag ${DOCKER_IMAGE_NAME} --file ./dockerfile_verfication ."
        }
    }

    stage("Run Tests") {
        def contID = bat(script: "type .\\xuicommon_gv_docker.pid", returnStdout: true).trim()
        echo "container id id is  ${contID}  "
        
        bat "del .\\xuicommon_gv_docker.pid"

        // bat "docker rm ${contID}"
        // bat "rm ./xuicommon_gv_docker.pid"
        //             def contID = bat (script: "type .\\xuicommon_gv_docker.pid", returnStdout:true)

        // try {
        //     // this command will create a file with the container id
        //     echo "DOCKER_CONTAINER_NAME: ${DOCKER_CONTAINER_NAME}"
            
        //     bat "docker create --cidfile ./xuicommon_gv_docker.pid --name ${DOCKER_CONTAINER_NAME} ${DOCKER_IMAGE_NAME}"
            
        //     // this command will start the container with the id from the file
        //      // this command will start the container with the id from the file
        //         // bat "docker start `cat ./xuicommon_gv_docker.pid`"

        //         // // this command will execute the command in the container and return the result code 
        //         // checkTypesExecutionResultCode = sh (
        //         //     script: "docker exec `cat ./xuicommon_gv_docker.pid` /bin/bash -c \"cd /xui/common && npm run check-types\"",
        //         //     returnStatus: true
        //         // )

        //         // packageSecurityAuditResultCode = sh (
        //         //     script: "docker exec `cat ./xuicommon_gv_docker.pid` /bin/bash -c \"cd /xui/common && npm audit --groups dependencies\"",
        //         //     returnStatus: true
        //         // )

        //         // linterResultCode = sh (
        //         //     script: "docker exec `cat ./xuicommon_gv_docker.pid` /bin/bash -c \"cd /xui/common && npm run lint\"",
        //         //     returnStatus: true
        //         // )

        //     echo "${contID}"
            
        // }
        //     finally {

        //         echo "HELLO"
        //         echo "${contID}"
        //                     echo "DOCKER_CONTAINER_NAME: ${DOCKER_CONTAINER_NAME}"

        //     }
    }
}

